VIRUS-L Digest   Wednesday, 25 Jul 1990    Volume 3 : Issue 130

Today's Topics:

Is it possible...?
40.000 Disk Killers ? (PC)
1022 (Fellowship) virus (PC)
PC Virus report from U.K.
Re: LaserWriter virus?
Re: other ways for viral injection ?

VIRUS-L is a moderated, digested mail forum for discussing computer
virus issues; comp.virus is a non-digested Usenet counterpart.
Discussions are not limited to any one hardware/software platform -
diversity is welcomed.  Contributions should be relevant, concise,
polite, etc.  Please sign submissions with your real name.  Send
contributions to VIRUS-L@IBM1.CC.LEHIGH.EDU (that's equivalent to
LEHIIBM1.BITNET for BITNET folks).  Information on accessing
anti-virus, documentation, and back-issue archives is distributed
periodically on the list.  Administrative mail (comments, suggestions,
and so forth) should be sent to me at: krvw@CERT.SEI.CMU.EDU.

   Ken van Wyk

---------------------------------------------------------------------------

Date:    Fri, 13 Jul 90 10:30:00 -0400
From:    WHMurray@DOCKMASTER.NCSC.MIL
Subject: Is it possible...?

> Is it possible to make something for PCs, which works effectively against
> all the virus, old or new?

Yes, but with limits.

Security measures that are 100% effective have infinite cost.  As a
result, we usually strive for security meausures that are
efficient.  An efficient measure is one that covers its own cost
and which is cheaper than the next best alternative.

The conditions that are necessary for the success of a virus are:

1) that it be able to get itself executed (calling an arbitrary
   program);

2) that it can store a copy of itself (writing);

3) that the copy can be moved to a second environment (sharing);

4) that there be a sufficient number of target environments
   (population);

Thus, in order to protect against viruses in general, one must be
prepared to restrict one or more of these, otherwise valuable,
conditions.  Only the first two are really of interest; these are
the two that are within the control of the execution environment.

Cohen suggests that we restrict the first.  He points out that in a
world made up of application machines (i.e., computers in which all
procedures are bound and not subject to change; e.g., ATMs or
arcade machines), we would enjoy most, but not all, of the
advantages of computers.

Thus, by restricting the capability to create new or modify
existing programs, one could protect the machine from viruses.
(Try a thought experiment: try to visualize how you might change
the programs of an arcade machine from the joy-stick.)

In practice, this restriction is often quite tolerable.  Days often
go by in which I do not deliberately introduce a new program into
my machine; I rarely ever modify an existing program.  While I
would not want to give up the freedom to do so forever, binding it
for long periods is not inconvenient.  Relaxing it when I intend to
introduce a new program requires only a key-stroke.  If I
inadvertantly relax it for a virus, it will still prevent the
execution of the infected program.

My secretary's machine believes that it is a word-processor.
However, it became badly contaminated with a virus when she tried
to print a file on a diskette brought in by a student.  Restricting
her machine only to the word-processing program would be consistent
with the intent of its use and would have prevented it from
executing the virus.

This mechanism works fundamentally; i.e, it restricts one of the
fundamental capabilities on which a virus relies.  It operates
early; i.e., it prevents the execution of the virus, rather than
trying to detect it, or limiting its ability to write.

It does not rely on its ability to recognize programs that are
malicious or unauthorized.  Rather, it relies upon its ability to
recognize programs that are benign or, at least, authorized.  This
is a much easier problem.  As Cohen has said, and as Dave Chess
likes to remind us, there is no rule which is sufficient for
distinguishing between a virus and any other program.  On the other
hand, it is relatively easy to distinguish between known and
authorized programs, and all others.

This is not an easy restriction to impose or enforce.  Nonetheless,
it is possible.  It is not universally applicable.  However, it is
broadly applicable, and where it is applied, it is equally
effective against all viruses.

William Hugh Murray, Executive Consultant, Information System Security
21 Locust Avenue, Suite 2D, New Canaan, Connecticut 06840
203 966 4769, WHMurray at DOCKMASTER.NCSC.MIL

------------------------------

Date:    Wed, 25 Jul 90 13:00:28 +0000
From:    frisk@rhi.hi.is (Fridrik Skulason)
Subject: 40.000 Disk Killers ? (PC)

Can anybody confirm a report that PC Today shipped 40.000 disks infected with
Disk Killer with their magazine ?

- -frisk

[Ed. See below.]

------------------------------

Date:    Wed, 25 Jul 90 08:24:00 -0500
From:    ddavidso@mqccsunc.mqcc.mq.oz.au (Dean Davidson)
Subject: 1022 (Fellowship) virus (PC)

RZOTTO@DKNKURZ1.BITNET (Otto Stolz) writes:
>> Only infects .EXE files, adding 1022 bytes to them
>
>Is this figure accurate?
>
>I think that EXE files can only grow by multiples of 16.
>Am I mistaken?

I just checked - sometimes it adds 1021 bytes, sometimes 1022 but
definitely not 1024 if it added in multiples of 16

BTW I sent Frisk a copy of the 1022 virus.  He reported to me that it
is identical to a virus he knows called the "fellowship"

Dean

------------------------------

Date:    Wed, 25 Jul 90 11:35:01 -0400
From:    "Kenneth R. van Wyk" <krvw@cert.sei.cmu.edu>
Subject: PC Virus report from U.K.

CERT/CC received a report today that a magazine in Britain, PC Today,
had inadvertantly distributed some 40,000 PC floppy disks which
contained the "Disk Killer" virus.  We then contacted PC Today as well
as Ed Wilding, the editor of the Virus Bulletin publication in
Britain.  Both were able to confirm the report.  However, the virus, a
boot sector virus, had been partially overwritten during the
duplication process, and thereby made inoperable.  So, although the
copies were distributed, the disks apparently do not contain
functional viruses.

Again, the virus, as distributed, appears to be non-functional.

When PC Today learned of the infections, they recalled the disks and
notified the British press of the situation.

A spokesperson at PC Today said that they will be taking steps to
prevent this from happening again.  Specifically, they will be
scanning their master disks in house, as well as at the duplication
facilities, for known viruses.

For further information, contact PC Today at +44 625 87 8888.

Regards,

Ken

Kenneth R. van Wyk
Moderator VIRUS-L/comp.virus
Technical Coordinator, Computer Emergency Response Team
Software Engineering Institute
Carnegie Mellon University
krvw@SEI.CMU.EDU      (work)
ken@OLDALE.PGH.PA.US  (home)
(412) 268-7090  (CERT 24 hour hotline)

------------------------------

Date:    Tue, 24 Jul 90 17:21:37 +0000
From:    swsh@midway.uchicago.edu (Janet M. Swisher)
Subject: Re: LaserWriter virus?

I have heard in several places that this LaserWriter nasty is a Trojan
horse.  If so, that would seem to restrict it to being a Mac problem.
However, nothing that I have seen mentions the name that this Trojan
goes under, so I don't know what to look out for.  Could someone with
actual experience with the problem confirm/deny/specify?

Janet Swisher
swsh@midway.uchicago.edu
U of Chicago, Academic and Public Computing

------------------------------

Date:    Wed, 25 Jul 90 12:59:49 -0400
From:    Valdis Kletnieks <VALDIS@VTVM1.CC.VT.EDU>
Subject: Re: other ways for viral injection ?

>Date:    24 Jul 90 13:42:46 +0000
>From:    lath@geocub.greco-prog.fr (Laurent Lathieyre)
>Subject: other ways for viral injection ?
>...
>
>	Alike, did some Trojan horses be discovered in some
>operating systems ? I wonder if operating systems shouldn't
>preferably be delivered in source form rather than in
>compiled form...

Even source form is not foolproof....

Consider the following (due to either (I think) Thompson or Ritchie, I
forget which):  (/bin/login is the Unix login processor, /bin/cc is the
C compiler)

They took the source for /bin/login, put in a trapdoor.  They recompile,
then put the old source back.  OK..  Backdoor installed, but it goes
away the next time you recompile /bin/login.

Step two:  You modify /bin/cc to recognize when it is compiling
/bin/login (takes a lot of context-sensitive matching, but can be
done).  Have it insert the code you want at the appropriate point.  Now
we have a clean source for /bin/login, that regenerates when you
recompile it.  However, recompiling the C compiler, and then recompiling
/bin/login removes it.

Step 3:  You modify /bin/cc some more, to (a) insert the /bin/login
modification and (b) insert itself if recompiling /bin/cc (i.e.  a
self-replicating modification).  You then put in a *clean* version of
the cc and login sources, and recompile EVERYTHING.  The sources all
look OK, and every time you recompile /bin/login, the trapdoor is
inserted, and everytime you recompile /bin/cc, the code to INSERT the
trapdoor is inserted.  The only way to recover from this is to restore
the C compiler from a backup tape, and recompile everything...

The citation went on to say that they actually DID these changes to the
C compiler, just to see if they were doable.  No version was ever
released to the outside world, but the NSA was bidding for Unix systems
and there was great temptation....

                                  Valdis Kletnieks

------------------------------

End of VIRUS-L Digest [Volume 3 Issue 130]
******************************************
