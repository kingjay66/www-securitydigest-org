Subject: RISKS DIGEST 11.89
REPLY-TO: risks@csl.sri.com

RISKS-LIST: RISKS-FORUM Digest  Thursday 13 June 1991  Volume 11 : Issue 89

        FORUM ON RISKS TO THE PUBLIC IN COMPUTERS AND RELATED SYSTEMS 
   ACM Committee on Computers and Public Policy, Peter G. Neumann, moderator
  Contents:
Re: Formalism vs. Experimentation (Nancy Leveson, Steven Philipson, Ed Nilges,
    Michael Tobis, Bob Frankston, john, David Murphy, Paul Andrew Olson,
    Ian Brown, Michael Barnett)

 The RISKS Forum is moderated.  Contributions should be relevant, sound, in 
 good taste, objective, coherent, concise, and nonrepetitious.  Diversity is
 welcome.  CONTRIBUTIONS to RISKS@CSL.SRI.COM, with relevant, substantive 
 "Subject:" line.  Others ignored!  REQUESTS to RISKS-Request@CSL.SRI.COM.  For
 vol i issue j, type "FTP CRVAX.SRI.COM<CR>login anonymous<CR>AnyNonNullPW<CR>
 CD RISKS:<CR>GET RISKS-i.j<CR>" (where i=1 to 11, j always TWO digits).  Vol i
 summaries in j=00; "dir risks-*.*<CR>" gives directory; "bye<CR>" logs out.
 The COLON in "CD RISKS:" is essential.  "CRVAX.SRI.COM" = "128.18.10.1".
 <CR>=CarriageReturn; FTPs may differ; UNIX prompts for username, password.
 ALL CONTRIBUTIONS CONSIDERED AS PERSONAL COMMENTS; USUAL DISCLAIMERS APPLY.
 Relevant contributions may appear in the RISKS section of regular issues
 of ACM SIGSOFT's SOFTWARE ENGINEERING NOTES, unless you state otherwise.

----------------------------------------------------------------------

Date: Wed, 12 Jun 91 11:57:13 -0700
From: Nancy Leveson <nancy@murphy.ICS.UCI.EDU>
Subject: Re:  Formalism vs. Experimentation (RISKS-11.86 [,87,88])

I am dismayed by the focus in this discussion on making everything into
dichotomies: women cannot think logically or do mathematics, men can.  Women
work well in cooperative problem solving, men don't.  Software should be
developed using logic only, software should not be developed using logic.

First, I have never heard of Danielle Bernstein or of Kean College.  Karen
Frenkel is an editor on the staff of the CACM, and, as far as I know, she is
not a computer scientist or mathematician.  I don't understand why everyone in
this discussion has taken these two people's comments as somehow being informed
and knowledgeable.  Perhaps it is because they fit the common stereotype -- the
one that has resulted in women having so much trouble breaking into scientific
fields.  I personally do not believe that women are less capable at mathematics
and logic than men -- but our society teaches them at a young age that it is
not feminine to be good at these things.  It is not very surprising to me that
girls start to do poorly in these classes just about the time they reach
puberty and start becoming interested in boys.  I remember lying about being a
math major because when I told boys this, they would give me a funny look,
screwing up their faces and saying "you must be a brain" (which sounded very
much to me like "you must be a freak").  NOBODY wants to be known as a freak,
male or female.  Boys in our society adjust their behavior to avoid doing
things that make them appear feminine.

Because of the stereotypes, women who are interested in math and logic are
discouraged and told that they should do something else because they will never
be good at it.  Whenever one of the stupid studies that say women are not good
in math is published in the popular press, the number of girls enrolled in
advanced math classes plummets.  When I taught high school math, I found both
teachers and parents discouraging girls from taking advanced math.  They are
told to concentrate on subjects that "girls are good at."  I used to get so
frustrated when parents of some of my best students (female) would tell them
they should major in English or another "female" subject.  If the boys were
having trouble in math, the parents would immediate help them or hire a tutor.
If the girls were having problems, they were told that girls weren't supposed
to be good in math and not to worry about it.  Maria Klawe told me a story
about recently visiting a high school chemistry class.  It was the first day of
the term and the teacher was going through the table of contents of the
textbook and describing what they would be learning.  Of one chapter he said,
"This chapter is very mathematical so the girls won't do well on this part of
the class."  Real encouraging -- the way to get people to do well is for an
authority figure to tell them before they start that they won't succeed :-).

Second, although I believe in applying formal methods to software engineering,
I have never seen any person produce a million line piece of code by sitting
back and thinking logically about it.  Djkstra does not deal with large
programs.  The developers must work cooperatively together in producing that
software (including reviews, etc.) to build a reasonable product.  Trying to
dichotomize the skills required here is wrong.  It takes both an ability for
logical thinking AND the ability to experiment and work together cooperatively.
Instead of taking something said in the CACM as gospel, look around you.  Are
the female programmers you see less able than the men?  The women I find in
industry are wonderful.  Perhaps they have to be to get past the stereotypes
and other barriers that this discussion and the messages that have been sent to
Risks about this have shown are out there.

Now, to be really provocative, there is some evidence that women are better at
using "both sides of their brains" than are men (who tend to be analytical but
not good at other skills).  Perhaps that means that women will actually be
better than men at developing complex software products :-).  If you are male
and get irate at this statement because I have just stereotyped all males,
imagine how women feel who get this all the time.
                                                      nancy leveson

------------------------------

Date: Wed, 12 Jun 91 14:36:38 -0700
From: stevenp@kodak.pa.dec.com (Steven Philipson)
To: Geraint.Jones@prg.oxford.ac.uk
Subject:  Re: Formalism vs. Experimentation (Jones, RISKS-11.88)

   I found your article in RISKS interesting, but there is a point on which I'd
like to comment.

> ... Or would you prefer a world in which we worship bridge-builders and live
> in fear and awe of their constructions?  Of course not.

   It seems to me that we do live in the world of your latter case.  Civil
engineers _are_ a minority of the population, and their work is not understood
by the majority.  Engineering is indistinguishable from magic for many.  Most
people blindy trust the engineer's work because it is both highly reliable and
pervasive in our environment.  A person in our society would find it very
difficult to avoid contact with all technologies he or she doesn't understand.

   There is another minority profession that is just as opaque to layman but is
feared by some.  Most people have no understanding of how aircraft fly, and
have mixed feelings about pilots as being something of a cross between magician
and daredevil.  Many people are afraid of flying but fly anyway as their are
few, if any, reasonable alternatives for their transportation needs.

   It is my opinion that it would be extremely bad for us to change our system
such that it would become possible for people with lesser ability or restricted
training to assume major responsibility in technologically demanding fields.
Public safety demands competence, irrespective of the majority's ability to
understand or perform the work itself.  This may not require us to stand in awe
of all professionals, but we must at least appreciate that not everyone has
what it takes.
				     Steve Philipson

------------------------------

Date: 12 Jun 91 21:45:45 GMT
From: egnilges@phoenix.princeton.edu (Ed Nilges)
Subject: Re: Formalism vs. Experimentation (Pomeranz, RISKS-11.87)

>... However, if I were that student I wouldn't even bother.

Huh?  What is a university about, save getting a student from point A
to point B?  Why is the "necessary violence" of teaching discriminatory?

And in Computer Science there is no "conversational German."  It's all
technical.  Bernstein feels it would be less sexist to have the students who
wish to learn high-level languages and packages.  However, Computer Science is
not about low-level language and you can discuss effective algorithms in the
highest-level language.

>... The Russian women in Ed's classes are those few women who are able to 
> "hack it" in the rigorously mathematical and abstract Russian system.

Actually, there are probably MORE women working as scientists and engineers
within Soviet technical institutes and universities, proportional to the
population, than in American universities: and it can cogently be argued that
the lower on-the-job sex discrimination experienced by Soviet women (balanced,
unfortunately, by a "second shift" worse than that of their American
counterparts) is a result of a more demanding, and more formal, education in
mathematics.

INFORMALITY can create much discrimination as dropping formal (and hence
visible) criteria results in there being unspoken discrimination based on
class, race and gender.  Mathematics has historically been a path out of
invisibility for low-status males (one is reminded of G. H. Hardy's discovery
of the brilliant, but completely unknown, Indian mathematician Ranumujan).  It
has not, historically, performed the same function for women, but that is
because of extra-mathematical discrimination...the source of which is very
often the less-than-competent teacher of mathematics with his own,
undealt-with, issues around math anxiety.  One thinks of the women who were
able to end-run the prejudices around mathematics by entering "the most
difficult part of applied mathematics" (Dijkstra): Ada Augusta and Grace
Hopper.

>It may well be that more formal training turns some people into better
>programmers.  ...

I'm sorry, I have never seen how anything less than SOME sort of formalism
(from automata theory to decision tables) has ever resulted in any progress in
the field of programming.

>All education would benefit from massive dose of new and different thinking...

Here's one example of "new and different" thinking in education.  Students in a
poor Brooklyn district are being allowed to watch "kiddie slasher" movies in
their assembly period, including "Child's Play 2."  I suggest that this racist
pandering to the absolute worst in students is the logical end-point of these
attempts to sugar-coat and deflate the curriculum in the name of fairness.
Better the brutal frankness of affirmative action than this.

------------------------------

Date: Thu, 13 Jun 91 04:24:30 GMT
From: tobis@meteor.wisc.edu (Michael Tobis)
Subject: Re: The RISKS of political correctness in computer science

Hal Pomerantz, it appears to me, has completely missed the point of Ed Nilges'
comments. It is more than "unfortunate" that the word "sexist" is used in an
argument about the emphasis which formal and rigorous thought should have in
computer education. It is symptomatic of a very significant risk to academic
thought which, rather incredibly, is leaking out of the liberal arts and soft
sciences into a critique of rigorous thinking itself.

In a nutshell, the problem is not the extent to which formal automata theory,
software engineering, verification, etc. should be presented in an
undergraduate program. The problem is that the issue is being attacked _on the
grounds_ of its social/political appropriateness, rather than its utility.

I have recently become aware of the extent to which the more ambitious
(generally female baby-boomer academic) proponents of "deconstruction" intend
to carry their philosophy. I was, in conversation with one such, discussing the
(well-known to RISKS readers) propensity of the press to garble matters with a
scientific content.

I mentioned a recent article in the New Republic on the future of energy, in
which hydrogen was mentioned as a possible energy source, pointing out its
plentiful "supply" in the world's oceans. (This is a common confusion with the
attractiveness of hydrogen as a _fuel_ for vehicles.  Most readers will
understand that the second law of thermodynamics prevents the use of hydrogen
extracted from water as an energy _source_, since combustion restores it to a
component of water.)

I remarked that the part of the article that had most irritated me was the
admission that there were "technical problems" with the use of hydrogen as an
energy source, with a qualifier to the effect that "scientists are always
saying things are impossible and then finding out how to do them in the long
run". (another common misconception)

The female baby boomer academic in question responded that this was indeed the
case, and that "you scientists are so attached to your orthodoxies". Yes, the
law of entropy, folks, is not an enigma, not a strange but inevitable feature
of the fabric of the universe, nor an excellent approximation to reality whose
limits have yet to be discovered. It is a dogma, if the deconstructionists are
to be believed. What is more (here in the interests of preserving our
friendship the conversation had to be dropped) it is no more or less true than
"any other myth".

My guess is that had the conversation continued, the second law would be
denounced as sexist, since it had been promulgated almost exclusively by
wealthy or at least bourgeois white males. I have since discovered that there
is a literature of the "deconstruction" of science, which generally shows
little understanding of the pursuit of knowledge through rigourous thought, and
claims to deny the _existence_ of truth in an extravagantly radical way.

I looked up "physics" in the index of one "deconstruction of science" book,
since skimming the book showed so little attention to what is usually
considered to be the scientific enterprise. Sure enough, there was one such
reference. From memory, it said something like "The principal effect of the
beginnings of physics was to blur the boundaries between the aristocracy and
the serfs, since aristocrats found themselves doing manual labor." This was the
first reference to physics in the book. An effect, perhaps. The _principal_
effect???

There are many people who 1) are in positions of some power and influence at
universities 2) believe that there is no "truth" other than a matter of
"preference" and 3) that all discourse, whatever its explicit content, is
implicitly about the relations between the privileged and the oppressed. That
such people are the ones enforcing "political correctness" is not surprising.

The connection to the typical subject matter of this group is somewhat remote.
Mr. Nilges' comments are only an example of the broad problem, which should not
be underestimated, particularly by those of us with a broad sympathy with most
of the aims of feminism. I think the aspect that the readership of RISKS should
be concerned about is the amazing ignorance of what it is we
scientific/technological types do, among intelligent literate people, that
allows it to be construed as just another branch of politics.

I hope, with their moderators' permission, to continue this discussion in
soc.feminism .

Michael Tobis   tobis@meteor.wisc.edu

------------------------------

Date: June 12, 1991 7:35 pm EDT
From: <Bob_Frankston@world.std.com>
Subject: Re: Formalism versus Experimentation

There are two unrelated discussions here.

The first starts with the proposition that computer programming requires a 
certain skill set and considers the social impact arising from that premise.  
An interesting topic but not limited to the risks of technology except as one 
of the (primary?) forces of social change.

We should also examine the proposition itself.  One way programming (by any 
of its varied names and approaches) differs from other engineering 
disciplines is that it is very malleable and even self-redefining. The 
original higher level programming languages, automatic programming (Fortran), 
were intended to allow mathematicians to get direct access to the computer. 
Later SPSS gave psychologists statistics to revel in.

With PCs (Personal Computer, not Political Correctness and not just IBM PCs) 
the goal is to empower the "end user" to control the systems. In effect, 
program the systems in a way that makes sense to that user.  Of course a term 
like "end user" becomes inappropriate when others benefit from the automation 
(scripting, programming, whatever term you'd like).

To go back to Geraint Jones' bridge building analogy, some of us produce 
bridge building kits.  Others, having faith that the kits will assure the 
bridges will not fall down, concentrate on the aesthetic or political or 
whatever aspects are appropriate.

The fundamental fallacy in a "pure logic" approach to programming is that it 
doesn't scale and deal with complexity.  Chemical engineering is not just 
quantum mechanics with a few more numbers.

------------------------------

Date: Wed, 12 Jun 91 22:29:31 -0700
From: anasaz!qip!john@asuvax.eas.asu.edu
Subject: Formalism and Experimentalism

I want to offer a viewpoint on formalism in computer education from the
commercial world. I have worked as a programmer, designer and manager for 25
years. After a while in the profession, I went back to school and studied
formal methods along with the rest of the computer science curriculum, so I
have some insight on both sides of this this.

I find the assertion that formal proofs and other formalisms should be required
subjects for programmers and system designers to be ludicrous.  Anyone who has
worked on a real-world, complex system knows that formal proofs are rarely
possible. In fact, it is hard to even find a statement of work or a
specification that is complete - much less provable.

Likewise, there are few people who end up writing compilers for a living, yet
computer science curricula require courses in formal grammars. Why? It may weed
out a number of good system designers who are not mathematicians, but will only
be used by a very few students.

In hiring programmers and designers, I have found some correlation between
basic computer science education and the ability to perform good work. I have
found almost none between mathematical ability (as distinct from logical
reasoning ability) and programming or design skills.
 
I concede that there are a few cases where formal methods are required.  for
example: research, robotics, super-critical real world control systems (in
those few cases where they can be simplified and specified), VMM kernels,
database systems internals and compilers.

I would argue, however, that the vast majority of those in the profession will
never need or have an opportunity to employ those methods. It is an economic
and human waste to require this material of everyone in the profession.

------------------------------

Date: Thu, 13 Jun 91 11:05:56 BST
From: David Murphy <dvjm@dcs.glasgow.ac.uk>
Subject: Re: The impact of formalism on Computer Science education

I'd like to add my tuppence to the current religious wars in RISKS on Formalism
in CS education. It's hard to know where CS is going, as it has only been
around as a discipline for half a century or so; let us instead, then,
translate the debate to an older science -- Physics.

The anti-formalists say: women tend to prefer experimentation and teamwork to
solitary abstract thought. Hence we should cut the theory out of Physics to
widen its franchise; there are plenty of people who `could' be professors of
physics without knowing any theory if only we would let them.

The formalists say: Physics is an inherently mathematics discipline; a good
understanding of it requires abstract mathematical thought.

Seen in these terms, the debate becomes less polarised; Physics is inherently
mathematical -- you can remove some of the mathematics, but not without
removing some of the Physics. It is also inherently experimental --
theoreticians need experimenters and vice versa. It is my belief that CS will
eventually mature into this kind of subject; experimenters build things, using
previously developed theory. Their constructions either call for a new theory
(infrequently -- paradigm changes are rare in a mature subject) or support the
old one. Just as no engineer would think of building anything but the simplest
bridge without using the theory of statics, so no software engineer will think
about building anything but the simplest program without using the theory of
program development. That doesn't mean that all software engineers will need to
understand categorical logic, but it does mean that they will all want to use
the products of theory; because they can build better, safer programs that way.

------------------------------

Date:  Thu, 13 Jun 91 09:38 EDT
From: Paul Andrew Olson <PAOlson@DOCKMASTER.NCSC.MIL>
Subject:  Re: Political Correctness in Computer Science

Re Ed Nilges posting on PC vs. formal training,

I became a Computer Science major at Columbia University only just after it
became the popular thing to be.  Classes that had held 25 people ballooned to
125 in a single semester.  The number of available terminals did not keep pace
with the demand, so I found myself in much the same position as Mr. Nilges'
Russian students.  Since computer time was available only late, on weekends,
after an indeterminate waiting period (I hate waiting), I learned early to
rigorously design, code, hand-simulate, and re-code.  I found this way I could
type in and finish my assignments in relatively few compiles, rather than
having to come back repeatedly, as my fellows were doing.  I readily admit it
was hard work, but it was harder work if I didn't do it.  It is an already-old
but true cliche that 'the sooner you begin coding, the longer programming will
take'.  Dijkstra is to be commended for trying to get the curriculum to reflect
this.

The astute will notice that I am arguing for more Formalism, based on
Experience:-)

I believe Nilges is also correct regarding the RISKs of political correctness.
In academia today, accusations of being racist, sexist, elitist, etc.  are
freely tossed about, expressly for political ends.  For an excellent reference
on this phenomenon, read "Illiberal Education" by D'Nesh D'Souza.  D'Souza is
Indian by birth, so University presidents and professors felt comfortable
admitting to him how disciplenary action, mob rule, and sophistry are used to
suppress free speech, limit academic freedom, and politicize the curriculum.
The news is bad, and the RISKs go a lot farther than computer science.

------------------------------

Date: Thu 13 Jun 1991 10:02:48 EDT
From: creare!inb@dartvax.dartmouth.edu (Ian Brown)
Subject: Re: Formalism versus Experimentation

Eric Postpischil writes in RISKS 11.88:

    [assuming women prefer experimentation/teamwork], is not the
    proper question to ask "Which method of teaching women is best for
    their learning?"  rather than "Which method of teaching women most
    addresses women's preferences?".  That is, even if we assume
    experimentation and teamwork is best for women, this does not
    necessarily mean teaching with experimentation and teamwork will
    produce better women computer scientists than would teaching with
    formalism.

While the question is probably reasonable, I think that you will find that a
significant number of people (both men and women) will learn better (not only
prefer) using experimentation and teamwork.  Using myself as a case in point;
I have only taken a couple of courses (one of which I completed, an
introduction to AI) in Computer Science.  The way I learned most of my
programming skills (and I think that most people would say that I am, at
least, a competent programmer) was through hands-on work.

I think the real risk here is that people are going under the assumption that
there is *one* best way to teach, whether the subject be Computer Science, or
anything else.  The problem with this is that different people learn in
different ways; you are trying to force a square peg into a round hole - you
may succeed, but the fit will not be very good.

The goal should be to produce as many good programmers as we can; don't
exclude someone or force them to be less efficient by selecting a single
method of teaching.

------------------------------

Date: Thu, 13 Jun 91 09:48:49 CDT
From: mbarnett@cs.utexas.edu (Michael Barnett)
Subject: Re: 11.86 -- Political Correctness (cont'd)

In RISKS-11.86, Ed Nilges discussed Karen Frankel's article in the Nov. 1990
CACM. I also was bothered by the comments of Danielle Bernstein.  Although
there are some faculty members here at the University of Texas at Austin that
try to teach in a more rigorous manner, the undergraduate curriculum here is
based mainly on programming. From my perspective as a graduate student and
teaching assistant, it is precisely this approach which puts the women students
at a disadvantage. Generally it seems it is the male students who have more
experience playing with computers and benefit from the "kick it 'till it prints
out the right answer" mentality. A more Dijkstra-esque approach in the
curriculum would provide a "level playing field", an environment equally new to
both genders.

I have been told by female students that they are often intimidated by the men
when working in the sort of group projects advocated by Bernstein. Being less
comfortable with rushing into coding and the consequent late-night debugging
sessions our students have been taught as the essence of computing (sigh), they
are often pushed to the periphery of the group activities.

Having said this, I would not like this thread to become part of an attack on
those who criticize computing and science in general for providing an
inhospitable environment towards groups that have been excluded. For a general
critique of the current movement against "political correctness", I recommend
Alexander Cockburn's article in The Nation, May 27, 1991.

Michael Barnett  (mbarnett@cs.utexas.edu)

------------------------------

End of RISKS-FORUM Digest 11.89
************************
